#!/bin/bash
# why bash? Just for fun!
# [-e] instruct bash to exit if any command [1] has a non-zero exit status.
# [-o] prevent errors in a pipeline from being masked.
# [-u] fail if found references to any variable which was not previously defined
set -euo pipefail

################################################################################
# GLOBAL VARS
################################################################################
OL_BOT_NAME="howibot"
OL_BOT_EMAIL="howi@okramlabs.com"
OL_ROOT="$(readlink -f "${BASH_SOURCE%/*}")"
OL_SOURCE_REPO="git@github.com:okramlabs/okramlabs.github.src.git"
OL_DEST_REPO="git@github.com:okramlabs/okramlabs.github.io.git"
OL_URL="https://okramlabs.github.io"
OL_RUN_AS_HOWI_BOT=1
# ... howibot-bash/src/config.sh

################################################################################
# LOG
################################################################################
hbb::loginfo() { printf "\033[94m%s\033[0m %s\n" "[$OL_BOT_NAME]:" "$*"; }
hbb::logerr() { printf "\033[91m%s\033[0m %s\n" "[$OL_BOT_NAME]:" "$*" >&2; }
hbb::logwarn() { printf "\033[33m%s\033[0m %s\n" "[$OL_BOT_NAME]:" "$*"; }
hbb::logok() { printf "\033[32m%s\033[0m %s\n" "[$OL_BOT_NAME]:" "$*"; }
hbb::logline() { printf "%s\n" "$*"; }
hbb::logmute() { printf "\033[39m%s\033[0m\n" "$*"; }
hbb::logbold() { printf "\033[1m%s\033[0m\n" "$*"; }
hbb::helpcmd() { printf "\033[1m%s\033[0m %s\n" "$1" "$2"; }

##########################################################################"$*"######
# RUN
################################################################################
hbb::run() {
 local int_cmd="$OL_ROOT/howibot-bash/commands/$1.sh"
 if hbb::file_exists $int_cmd; then
   source $int_cmd
 else
   local cmd="$OL_ROOT/howibot-bash/commands/$1/index.sh"
   local subbase="${2-""}"
   local scmd="help"
   [[ -z "$subbase" ]] || scmd="$OL_ROOT/howibot-bash/commands/$1/$subbase.sh";
   if hbb::file_exists $scmd; then
     source $scmd
   elif hbb::file_exists $cmd; then
     source $cmd
   else
     if [[ $1 == "help" ]]; then
       hbb::helpmenu
       exit 1
     fi
     hbb::logerr "Invalid operation $1"
     hbb::loginfo "use: howibot-bash --help"
     exit 1
   fi
   exit 1
 fi
}

################################################################################
# The command line help
################################################################################
hbb::helpmenu() {
    hbb::logbold "HOWI Bash Bot"
    hbb::logline
    hbb::logline "Usage: howibot-bash [option...] command [arg...]" >&2
    hbb::logline
    hbb::logline "Why bash? Just because :-)"
    hbb::logline

    source "$OL_ROOT/howibot-bash/help-menu.sh"

    hbb::logbold " INTERNAL COMMANDS"
    hbb::logline
    hbb::helpcmd "  create-command      " "create new command for howibot-bash"
    hbb::logline
    hbb::logbold " GLOBAL FLAGS"
    hbb::logline
    hbb::logline "   --as-howi-bot               run scripts as howi-bot"
    hbb::logline "   --src=<git-remote-url>      source repository for https://okramlabs.github.io/"
    hbb::logbold "                               (default: $OL_SOURCE_REPO)"
    hbb::logline "   --dest=<git-remote-url>     github org pages repo for https://okramlabs.github.io/"
    hbb::logbold "                               (default: $OL_DEST_REPO)"
    hbb::logline "   -h, --help                  show this help menu"
    hbb::logline
}

srcs=${OL_ROOT}/howibot-bash/src
for src in ${srcs}/*; do
  case "$src" in
    *.sh) source $src ;;
  esac
done

# Parse arguments and flags
CMDS=()
while [ "$#" -gt 0 ]; do
  case "$1" in
    # Override repos
    # source repository for https://okramlabs.github.io/
    --src=*)
      OL_SOURCE_REPO="${1#*=}";
      shift 1;;
    --src)
      echo "$1 requires an argument" >&2;
      exit 1;;
    # github org pages repo for https://okramlabs.github.io/
    --dest=*)
      OL_DEST_REPO="${1#*=}";
      shift 1;;
    --as-howi-bot)
      OL_RUN_AS_HOWI_BOT=0
      hbb::logok "running as howi-bot"
      shift 1;;
    --dest)
      echo "$1 requires an argument" >&2;
      exit 1;;
    -h | --help)
      hbb::helpmenu
      exit 0;;
    -*)
      hbb::logerr "unknown option: $1";
      exit 1;;
    *)
    CMDS+=("$1")
    shift 1;;
  esac
done

# run command
if [ ${#CMDS[@]} -eq 0 ]; then
  CMDS+=("help")
  CMDS+=("help")
fi

hbb::run "${CMDS[@]}"
